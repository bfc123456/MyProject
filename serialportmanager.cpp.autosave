#include "serialportmanager.h"
#include <QDebug>

SerialManager::SerialManager(QObject *parent)
    : QObject(parent), serialPort(new QSerialPort(this))
{
    connect(serialPort, &QSerialPort::readyRead, this, &SerialManager::handleReadyRead);
}

SerialManager::~SerialManager()
{
    closeSerialPort();
}

bool SerialManager::openSerialPort(const QString &portName)
{
    if (serialPort->isOpen())
        serialPort->close();

    serialPort->setPortName(portName);
    serialPort->setBaudRate(QSerialPort::Baud115200); // 固定115200bps
    serialPort->setDataBits(QSerialPort::Data8);      // 8位数据位
    serialPort->setParity(QSerialPort::NoParity);     // 无校验
    serialPort->setStopBits(QSerialPort::OneStop);    // 1位停止位
    serialPort->setFlowControl(QSerialPort::NoFlowControl); // 无流控

    if (serialPort->open(QIODevice::ReadWrite)) {
        qDebug() << "串口打开成功：" << portName;
        return true;
    } else {
        emit errorOccurred("无法打开串口: " + serialPort->errorString());
        return false;
    }
}

void SerialManager::closeSerialPort()
{
    if (serialPort->isOpen()) {
        serialPort->close();
        qDebug() << "串口已关闭";
    }
}

bool SerialManager::sendCommand(const QByteArray &data)
{
    if (!serialPort->isOpen()) {
        emit errorOccurred("串口未打开");
        return false;
    }
    
    qint64 bytesWritten = serialPort->write(data);
    if (bytesWritten == data.size()) {
        return true;
    } else {
        emit errorOccurred("发送数据失败");
        return false;
    }
}

bool SerialManager::isOpen() const
{
    return serialPort->isOpen();
}

void SerialManager::handleReadyRead()
{
    QByteArray data = serialPort->readAll();
    parseData(data);
    emit dataReceived(data);
}

void SerialManager::parseData(const QByteArray &data)
{
    if (data.size() >= 4 && data[0] == 0x55) {
        if (static_cast<unsigned char>(data[1]) == 0xAA) {
            int result = data[2];  // 00成功，01失败
            qDebug() << "衰减设置结果：" << (result == 0 ? "成功" : "失败");
        } else if (static_cast<unsigned char>(data[1]) == 0xBB) {
            int attenuation = data[2];
            qDebug() << "当前衰减值：" << attenuation << "dB";
        }
    }
}
